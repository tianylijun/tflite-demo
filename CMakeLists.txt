cmake_minimum_required(VERSION 3.11)

message(CMAKE_CURRENT_SOURCE_DIR: ${CMAKE_CURRENT_SOURCE_DIR})
message(CMAKE_CURRENT_BINARY_DIR: ${CMAKE_CURRENT_BINARY_DIR})
message(PROJECT_BINARY_DIR: ${PROJECT_BINARY_DIR})
message(OPENCV:$ENV{OPENCV_LINUX_ROOT})

if(ANDROID)
message(STATUS "TEST TOOL ANDROID")
set(OpenCV_DIR "$ENV{OPENCV_ANDROID_SDK_ROOT}/sdk/native/jni/")
set(BUILD_TYPE_DIR "build-android")
else()
message(STATUS "TEST TOOL LINUX")
if("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "aarch64")
set(OpenCV_DIR "$ENV{OPENCV_LINUX_ROOT}/build-arm64-linux")
else()
set(OpenCV_DIR "$ENV{OPENCV_LINUX_ROOT}/build-arm32-linux")
endif()
set(BUILD_TYPE_DIR "build-linux")
endif()

find_package(OpenCV QUIET COMPONENTS core highgui imgproc imgcodecs)
if(NOT OpenCV_FOUND)
    find_package(OpenCV REQUIRED COMPONENTS core highgui imgproc)
endif()

include(FindOpenMP)
if(OPENMP_FOUND)
	message(STATUS ${OpenMP_C_FLAGS})
	message(STATUS ${OpenMP_CXX_FLAGS})
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
endif()

message(STATUS "OpenCV_DIR = ${OpenCV_DIR}")
message(STATUS "OpenMP flags ${CMAKE_CXX_FLAGS}")
message(STATUS "compile name ${CMAKE_CXX_COMPILER_ID}")
message(STATUS "CMAKE_CXX_COMPILER_ID: ${CMAKE_CXX_COMPILER_ID}")
message(STATUS "CMAKE_SYSTEM_PROCESSOR: ${CMAKE_SYSTEM_PROCESSOR}")

include_directories(${CMAKE_CURRENT_SOURCE_DIR}/../tensorflow/)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/../tensorflow/tensorflow/lite/tools/make/downloads/flatbuffers/include)
link_directories(/home/lee/code/tensorflow/tensorflow/lite/tools/make/gen/aarch64_armv8-a/lib/)

add_definitions(-Wno-format -fpermissive -fPIC -std=c++11)
SET(CMAKE_EXE_LINKER_FLAGS "-static")

add_executable(tflite-demo tflite-demo.cpp)
target_link_libraries(tflite-demo tensorflow-lite ${OpenCV_LIBS})
